package com.example.GaoDe.ui.favorites

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.GaoDe.model.Favorite
import com.example.GaoDe.model.FavoriteType
import com.example.GaoDe.model.Place
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.ui.res.painterResource

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FavoritePlacesScreen(
    onNavigateBack: () -> Unit = {},
    onFavoriteClick: (Place) -> Unit = {}
) {
    var selectedTab by remember { mutableStateOf(FavoriteTab.MY_FAVORITES) }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        // È°∂ÈÉ®ÂØºËà™Ê†è
        TopAppBar(
            title = {
                Text(
                    text = "ÊàëÁöÑÊî∂Ëóè",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Black
                )
            },
            navigationIcon = {
                IconButton(onClick = onNavigateBack) {
                    Icon(
                        Icons.Default.ArrowBack,
                        contentDescription = "ËøîÂõû",
                        tint = Color.Black
                    )
                }
            },
            actions = {
                IconButton(onClick = {}) {
                    Icon(
                        Icons.Default.Add,
                        contentDescription = "Ê∑ªÂä†Êî∂Ëóè",
                        tint = Color.Black
                    )
                }
                IconButton(onClick = {}) {
                    Icon(
                        Icons.Default.MoreVert,
                        contentDescription = "Êõ¥Â§ö",
                        tint = Color.Black
                    )
                }
            },
            colors = TopAppBarDefaults.topAppBarColors(
                containerColor = Color.White
            )
        )
        
        // Êî∂ËóèÁ±ªÂûãÁ≠õÈÄâÊ†è
        FavoriteTabRow(
            selectedTab = selectedTab,
            onTabSelected = { selectedTab = it }
        )
        
        // ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü
        when (selectedTab) {
            FavoriteTab.MY_FAVORITES -> {
                MyFavoritesContent(
                    onFavoriteClick = onFavoriteClick
                )
            }
        }
    }
}

enum class FavoriteTab {
    MY_FAVORITES
}

@Composable
fun FavoriteTabRow(
    selectedTab: FavoriteTab,
    onTabSelected: (FavoriteTab) -> Unit
) {
    TabRow(
        selectedTabIndex = 0,
        containerColor = Color.White,
        contentColor = Color.Blue,
        modifier = Modifier.fillMaxWidth()
    ) {
        Tab(
            selected = selectedTab == FavoriteTab.MY_FAVORITES,
            onClick = { onTabSelected(FavoriteTab.MY_FAVORITES) },
            text = {
                Text(
                    text = "ÊàëÊî∂ËóèÁöÑ",
                    fontWeight = if (selectedTab == FavoriteTab.MY_FAVORITES) FontWeight.Bold else FontWeight.Normal
                )
            }
        )
    }
}

@Composable
fun MyFavoritesContent(
    onFavoriteClick: (Place) -> Unit
) {
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(bottom = 80.dp) // ‰∏∫Â∫ïÈÉ®Êìç‰ΩúÊ†èÁïôÂá∫Á©∫Èó¥
    ) {
        // Âø´Êç∑Êî∂Ëóè‰Ωç
        item {
            QuickAccessSection()
        }
        
        // Êî∂ËóèÂ§πÂàóË°®
        item {
            FavoritesListSection(
                onFavoriteClick = onFavoriteClick
            )
        }
    }
}

@Composable
fun QuickAccessSection() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            QuickAccessItem(
                icon = "üè†",
                title = "ÂÆ∂",
                modifier = Modifier.weight(1f)
            )
            
            QuickAccessItem(
                icon = "üíº",
                title = "ÂÖ¨Âè∏",
                modifier = Modifier.weight(1f)
            )
        }
    }
}

@Composable
fun QuickAccessItem(
    icon: String,
    title: String,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .height(80.dp)
            .clickable { },
        shape = RoundedCornerShape(8.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5))
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(12.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = icon,
                fontSize = 24.sp
            )
            
            Spacer(modifier = Modifier.height(4.dp))
            
            Text(
                text = title,
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color.Black
            )
        }
    }
}

@Composable
fun FavoritesListSection(
    onFavoriteClick: (Place) -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp)
    ) {
        // ÈªòËÆ§Êî∂ËóèÂ§πÊ†áÈ¢ò
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 12.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "ÈªòËÆ§Êî∂ËóèÂ§π",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Black
            )
            
            Text(
                text = "3",
                fontSize = 14.sp,
                color = Color.Gray
            )
        }
        
        // Êî∂ËóèÂú∞ÁÇπÂàóË°®
        val sampleFavorites = listOf(
            Place(
                id = "place_001",
                name = "ÂçóÊπñËä±Ê∫™ÂÖ¨Âõ≠",
                address = "Ê≠¶Ê±âÂ∏ÇÊ¥™Â±±Âå∫ÂçóÊπñÂ§ßÈÅì",
                latitude = 30.5117,
                longitude = 114.3489,
                category = "ÂÖ¨Âõ≠"
            ),
            Place(
                id = "place_002",
                name = "ÈªÑÈπ§Ê•º",
                address = "Ê≠¶Ê±âÂ∏ÇÊ≠¶ÊòåÂå∫ËõáÂ±±‰πãÂ∑Ö(Âú∞ÈìÅÁ´ô)",
                latitude = 30.5485,
                longitude = 114.3070,
                category = "ÊôØÁÇπ"
            ),
            Place(
                id = "place_003",
                name = "‰∏úÊπñÁîüÊÄÅÊóÖÊ∏∏È£éÊôØÂå∫",
                address = "Ê≠¶Ê±âÂ∏ÇÊ≠¶ÊòåÂå∫Ê≤øÊπñÂ§ßÈÅì16Âè∑",
                latitude = 30.5519,
                longitude = 114.3775,
                category = "ÊôØÁÇπ"
            )
        )
        
        sampleFavorites.forEachIndexed { index, place ->
            FavoritePlaceItem(
                place = place,
                onPlaceClick = { onFavoriteClick(place) },
                showActions = index == 1 // Âè™‰∏∫ÈªÑÈπ§Ê•ºÊòæÁ§∫Êìç‰ΩúÊåâÈíÆ
            )
            
            if (index < sampleFavorites.lastIndex) {
                HorizontalDivider(
                    modifier = Modifier.padding(vertical = 8.dp),
                    color = Color(0xFFF0F0F0),
                    thickness = 1.dp
                )
            }
        }
        
        // Â∫ïÈÉ®ÊèêÁ§∫
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 20.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = "Ê≤°ÊúâÊõ¥Â§öÂï¶",
                fontSize = 14.sp,
                color = Color.Gray
            )
        }
    }
}

@Composable
fun FavoritePlaceItem(
    place: Place,
    onPlaceClick: () -> Unit,
    showActions: Boolean = false
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onPlaceClick() }
            .padding(vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // ÂÆö‰ΩçÂõæÊ†á
        Icon(
            Icons.Default.LocationOn,
            contentDescription = "Âú∞ÁÇπ",
            tint = Color(0xFF2196F3),
            modifier = Modifier.size(20.dp)
        )
        
        Spacer(modifier = Modifier.width(12.dp))
        
        // Âú∞ÁÇπ‰ø°ÊÅØ
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = place.name,
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Black
            )
            
            Spacer(modifier = Modifier.height(4.dp))
            
            Text(
                text = place.address,
                fontSize = 14.sp,
                color = Color.Gray
            )
        }
        
        // Êìç‰ΩúÊåâÈíÆ
        if (showActions) {
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                IconButton(
                    onClick = {},
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        Icons.Default.Edit,
                        contentDescription = "ÁºñËæë",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                }
                
                IconButton(
                    onClick = {},
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        Icons.Default.MoreVert,
                        contentDescription = "Êõ¥Â§ö",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                }
            }
        }
    }
}

// Á§∫‰æãActivityÔºåÁî®‰∫éÂú®Android‰∏≠ÂêØÂä®Ëøô‰∏™Screen
class FavoritePlacesActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: android.os.Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            FavoritePlacesScreen(
                onNavigateBack = {
                    finish()
                },
                onFavoriteClick = { place ->
                    // Â§ÑÁêÜÊî∂ËóèÂú∞ÁÇπÁÇπÂáª‰∫ã‰ª∂
                }
            )
        }
    }
}